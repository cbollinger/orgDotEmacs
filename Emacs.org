
#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+CALL: checkout-submodules()

* Prerequisite - Before you start

Issue the following the steps before =emacs= loads =init.el= tangled from this file. 
** Company related fonts from

#+begin_src 
https://gitlab2.duagon.com/tools/docker/latex/-/tree/master/files/fonts
#+end_src

** Call this shell scripts to install all the required system packages

This script is a collection I did during fixing all the occured issues.
#+begin_src 
#!/usr/bin/bash

# org-essentials.sh
sudo apt update && sudo apt upgrade -y
sudo apt install python3-pip -y
sudo apt install python3.10-venv -y
pip3 install pygments -y
sudo apt install git -y
sudo apt install fonts-firacode -y
sudo apt install fonts-cantarell -y
sudo apt install ispell -y 
sudo apt install hunspell -y
sudo apt install hunspell-tools -y 
sudo apt install hunspell-de-ch -y
sudo apt install hunspell-en-gb -y
sudo apt install texlive-latex-base -y 
sudo apt install texlive-xetex -y 
sudo apt install default-jre -y 
sudo apt install texlive-pstricks -y 
sudo apt install inkscape -y 
sudo apt install graphviz -y
sudo apt install build-essential -y
sudo apt nsf-common -y
#+end_src

** Call this shell script to install the iosevka-fonts

This script is from =Programster's Blog=
#+begin_src 
#!/bin/bash
RELEASE="21.1.1"
mkdir /tmp/iosevka-font/$RELEASE
cd /tmp/iosevka-font/$RELEASE

# from Programster's Blog

wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-aile-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-curly-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-curly-slab-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-etoile-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-curly-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-curly-slab-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-slab-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss01-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss02-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss03-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss04-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss05-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss06-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss07-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss08-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss09-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss10-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss11-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss12-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss13-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss14-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss15-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss16-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss17-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-fixed-ss18-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-slab-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss01-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss02-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss03-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss04-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss05-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss06-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss07-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss08-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss09-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss10-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss11-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss12-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss13-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss14-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss15-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss16-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss17-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-ss18-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-curly-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-curly-slab-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-slab-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss01-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss02-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss03-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss04-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss05-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss06-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss07-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss08-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss09-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss10-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss11-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss12-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss13-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss14-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss15-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss16-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss17-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-iosevka-term-ss18-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-aile-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-curly-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-curly-slab-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-etoile-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-curly-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-curly-slab-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-slab-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss01-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss02-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss03-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss04-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss05-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss06-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss07-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss08-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss09-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss10-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss11-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss12-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss13-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss14-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss15-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss16-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss17-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-fixed-ss18-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-slab-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss01-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss02-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss03-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss04-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss05-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss06-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss07-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss08-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss09-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss10-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss11-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss12-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss13-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss14-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss15-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss16-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss17-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-ss18-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-curly-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-curly-slab-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-slab-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss01-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss02-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss03-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss04-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss05-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss06-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss07-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss08-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss09-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss10-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss11-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss12-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss13-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss14-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss15-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss16-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss17-$RELEASE.zip
wget https://github.com/be5invis/Iosevka/releases/download/v$RELEASE/ttf-unhinted-iosevka-term-ss18-$RELEASE.zip


unzip \*.zip

sudo mkdir /usr/local/share/fonts/iosevka-font
sudo mv *.ttf /usr/local/share/fonts/iosevka-font/.

sudo fc-cache -fv

#+end_src


* Default appearance

The following variables are used to tweak some of the configuration pieces for
use in the live streams so you might need to adjust them for your local machine
if you try to use this configuration directly.

#+begin_src emacs-lisp

  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

  ;; You will most likely need to adjust this font size for your system!
  (defvar efs/default-font-size 120)
  (defvar efs/default-variable-font-size 100)

  ;; Make frame transparency overridable
  (defvar efs/frame-transparency '(100 . 100))

#+end_src


* Tips for Use

In this document I've added links in many places that lead you to documentation
for the various packages we use.  If you're looking at this file in Emacs, you
can put your cursor on a link and press =C-c C-o= or run =M-x org-open-at-point=
to open the link in your web browser.


* Extra Git-Modules
#+NAME: checkout-submodules
#+BEGIN_SRC shell :results none
mkdir -p git-submodules
cd git-submodules
git clone https://github.com/fniessen/org-html-themes.git
#+END_SRC


* Startup Performance

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src


* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to
automatically install packages on a new system the first time you pull down your
configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this
configuration to make it a lot easier to automate the installation and
configuration of everything else we use.

#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)
  (setq package-archives
        '(("GNU ELPA"	. "https://elpa.gnu.org/packages/")
          ("Melpa"        . "https://melpa.org/packages/") 
          ("Melpa Stable" . "https://stable.melpa.org/packages/")))
  (setq   package-archive-priorities
          '(("Melpa"        .  0)
            ("GNU ELPA"	 .  5) 
            ("Melpa Stable" .  10)
            ))
;;  (package-initialize)
;;  (unless package-archive-contents (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
;;  (unless (package-installed-p 'use-package) (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  (add-to-list 'load-path "~/.emacs.d/elpa/org-contrib-0.4.1")
  ;; (add-to-list 'org-export-backends 'taskjuggler)  
#+end_src

** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It
will prompt you after a certain number of days either at startup or at a
specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src


* Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the
Emacs configuration folder clean!  It knows about a wide variety of variables
for built in Emacs features as well as those from community packages so it can
be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp
  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src


* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make
Emacs look a lot more minimal and modern.  If you're just getting started in
Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)=
line if you'd like to still see that.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 50)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
  ;;  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (setq-default fill-column 80)
#+end_src

** Font Configuration

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]], [[https://fonts.google.com/specimen/Cantarell][Cantarell]] and Iosevka Etoile fonts for this configuration which will
more than likely need to be installed on your machine.  Both can usually be
found in the various Linux distro package managers or downloaded from the links
above.
- sudo add-apt-repository universe
- sudo apt install fonts-fira
- sudo apt install fonts-cantarell


#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Fira Code Retina" :height efs/default-font-size)
;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height efs/default-font-size)
;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)
#+end_src


* Yasnippet
#+begin_src emacs-lisp 
(unless (package-installed-p 'yasnippet)
  (package-install 'yasnippet))
(require 'yasnippet)

(unless (package-installed-p 'yasnippet-snippets)
  (package-install 'yasnippet-snippets))
(require 'yasnippet-snippets)

(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"                 ;; personal snippets
        ))
(yas-global-mode 1)
#+end_src


* Undo
Enables the convinient undo-tree, which enables stepwise undo controlled by the
arrow key's.
#+begin_src emacs-lisp
(use-package undo-tree
  :init
  (global-undo-tree-mode 1))
#+end_src

* COMMENT Keybinding Configuration

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.
[[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with
which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs
modes with Vi-like keybindings for evil-mode.

#+begin_src

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :after evil
    :config
    (general-create-definer efs/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (efs/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src


* UI Configuration
** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you
use in a panel on the right side of the frame.  Great for live streams and
screencasts!

#+begin_src emacs-lisp

  (use-package command-log-mode
    :commands command-log-mode)

#+end_src

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many
different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide
which one you like best.  You can also run =M-x counsel-load-theme= to choose
between them easily.

#+begin_src emacs-lisp

  (use-package doom-themes
    :init
    (load-theme 'doom-palenight t)
    ;; (load-theme 'doom-challenger-deep)
    :config
    (doom-themes-treemacs-config)
    (doom-themes-org-config)
    )

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line
configuration for Emacs.  The default configuration is quite good but you can
check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need
to run `M-x all-the-icons-install-fonts` so that mode line icons display
correctly.

#+begin_src emacs-lisp

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key
binding in Emacs to offer you all possible completions for the prefix.  For
example, if you press =C-c= (hold control and press the letter =c=), a panel
will appear at the bottom of the frame displaying all of the bindings under that
prefix and which command they run.  This is very useful for learning the
possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet
powerful selection menu that appears when you open files, switch buffers, and
for many other tasks in Emacs.  Counsel is a customized set of commands to
replace `find-file` with `counsel-find-file`, etc which provide useful commands
for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more
information about each item.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy)

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

*** COMMENT Ivy Posframe
#+begin_src emacs-lisp
(use-package ivy-posframe
  :custom
  (ivy-posframe-width      115)
  (ivy-posframe-min-width  115)
  (ivy-posframe-height     10)
  (ivy-posframe-min-height 10)
  :config
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
  (setq ivy-posframe-parameters '((parent-frame . nil)
                                  (left-fringe . 8)
                                  (right-fringe . 8)))
  (ivy-posframe-mode 1))
#+end_src
*** Improved Candidate Sorting with prescient.el

prescient.el provides some helpful behavior for sorting Ivy completion
candidates based on how recently or frequently you select them.  This can be
especially helpful when using =M-x= to run commands that you don't have bound to
a key but still need to access occasionally.

This Prescient configuration is optimized for use in System Crafters videos and
streams, check out the [[https://youtu.be/T9kygXveEz0][video on prescient.el]] for more details on how to
configure it!

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src

** COMMENT Vertico
#+begin_src 
(use-package vertico
:ensure t
:init
(vertico-mode))
#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-=
command buffers.  For example, if you use =describe-function=, you will not only
get the documentation about the function, you will also see the source code of
the function and where it gets used in other places in the Emacs configuration.
It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Treemacs

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                5000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  ;; (use-package treemacs-evil
  ;;   :after (treemacs evil)
  ;;   :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))
#+end_src

** Text Scaling

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly
adjusting the scale of the text on screen.  We define a hydra that is bound to
=C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.
You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  ;; (efs/leader-keys
  ;;  "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src


* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document
editor, project planner, task and time tracker, blogging engine, and literate
coding utility all wrapped up in one package.

** Basic Config

This section contains the basic configuration for =org-mode= plus the
configuration for Org agendas and capture templates.  There's a lot to unpack in
here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full
explanation.


 #+begin_src emacs-lisp
   (defun efs/org-mode-setup ()
     (org-indent-mode)
     ;; (variable-pitch-mode 1)
     ;; (visual-line-mode 1)
     )

   (use-package org
     :mode (("\\.org$" . org-mode))
     :bind
     (("\C-cl" . org-store-link)
     ("\C-ca" . org-agenda)
     ("\C-cb" . org-iswitchb))
     :commands (org-capture org-agenda)
     :hook (org-mode . efs/org-mode-setup)
     :config
     (efs/org-font-setup)
     (setq org-ellipsis " ▾")
     (setq org-agenda-start-with-log-mode t)
     (setq org-log-done 'time)
     (setq org-log-into-drawer t)

     (setq org-directory "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode")
     (setq org-default-notes-file "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/refile/refile.org")
     (setq org-agenda-files (quote ("/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/refile"
				    "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/private"
				    "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/gnu-software"
				    "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/duagon/General"
				    "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/duagon/Clients"
				    "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/duagon/Products")))
     (setq org-todo-keywords
	   (quote ((sequence "TODO(t)" "NEXT(n)" "ONGOING(o)" "|" "DONE(d)")
		   (sequence "EC(C)" "RFEW(0)" "RFEX(1)" "G2(2)" "G2.1(3)" "G2.2(4)" "G3(5)" "|" "Abnahme(6)")
		   (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

     (setq org-todo-keyword-faces
	   (quote (("TODO"      :foreground "red"          :weight bold)
		   ("NEXT"      :foreground "blue"         :weight bold)
		   ("ONGOING"   :foreground "yellow"       :weight bold)
		   ("DONE"      :foreground "forest green" :weight bold)

		   ("EC"        :foreground "red"          :weight bold)
		   ("RFEW"      :foreground "blue"         :weight bold)
		   ("RFEX"      :foreground "magenta"      :weight bold)
		   ("G2"        :foreground "magenta"      :weight bold)
		   ("G2.1"      :foreground "yellow"       :weight bold)
		   ("G2.2"      :foreground "brown"        :weight bold)
		   ("G3"        :foreground "forest green" :weight bold)
		   ("Abnahme"   :foreground "green"        :weight bold)

		   ("WAITING"   :foreground "orange"       :weight bold)
		   ("HOLD"      :foreground "magenta"      :weight bold)
		   ("CANCELLED" :foreground "forest green" :weight bold)
		   ("MEETING"   :foreground "forest green" :weight bold)
		   ("PHONE"     :foreground "forest green" :weight bold))))

     (setq org-todo-state-tags-triggers
	   (quote (("CANCELLED" ("CANCELLED" . t))
		   ("WAITING" ("WAITING" . t))
		   ("HOLD" ("WAITING") ("HOLD" . t))
		   ("DONE" ("WAITING") ("HOLD"))
		   ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
		   ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
		   ("ONGOING" ("WAITING") ("CANCELLED") ("HOLD"))
		   ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

					   ;Targets include this file and any file contributing to the agenda - up to 9 levels deep
     (setq org-refile-targets (quote ((nil :maxlevel . 9)
				      (org-agenda-files :maxlevel . 9))))

					   ;Save Org buffers after refiling!
     (advice-add 'org-refile :after 'org-save-all-org-buffers)

     (setq org-tag-alist (quote ((:startgroup)
				 ("Projekte" . ?P)
				 (:grouptags)
				 ("D521_PDM" . ?a)
				 ("D522_BT" . ?b)
				 ("D522_NLD" . ?c)
				 ("RemoteIO" . ?c)
				 (:endgroup)
				 (:startgroup)
				 ("Private" . ?V)
				 (:grouptags)
				 ("Training" . ?t)
				 ("DSP" . ?d)
				 ("NOTE" . ?n)
				 ("ORG" . ?o)
				 ("PERSONAL" . ?p)
				 (:endgroup)
				 ("FLAGGED" . ??))))

					   ;Configure custom agenda views
     (setq org-agenda-custom-commands
	   '(
	     ("d" "Dashboard" ((agenda "" ((org-deadline-warning-days 7)))
			       (todo "NEXT"               ((org-agenda-overriding-header "Next Tasks")))
			       (todo "ONGOING"            ((org-agenda-overriding-header "All ongoing Tasks")))
			       (todo "WAITING"            ((org-agenda-overriding-header "All Tasks external waiting")))
			       (todo "HOLD"               ((org-agenda-overriding-header "All Tasks on hold")))
			       (todo "TODO"               ((org-agenda-overriding-header "All Todo Tasks")))
			       (todo "CANCELLED"          ((org-agenda-overriding-header "Project CANCELLED")))
			       (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	     ("c" "EC-Overview" ((agenda "" ((org-deadline-warning-days 7)))
				 (todo "EC"                   ((org-agenda-overriding-header "EC Planned")))
				 (todo "RFEW"                 ((org-agenda-overriding-header "RFEW: Request for Work signed")))
				 (todo "RFEX"                 ((org-agenda-overriding-header "RFEX: Request for Execution signed")))
				 (todo "G2"                   ((org-agenda-overriding-header "G2: Planning done")))
				 (todo "G2.1"                 ((org-agenda-overriding-header "G2.1: Development done")))
				 (todo "G2.2"                 ((org-agenda-overriding-header "G2.2: G2 Validation done")))
				 (todo "G3"                   ((org-agenda-overriding-header "G3: G3 Validation done")))
				 (todo "Abnahme"              ((org-agenda-overriding-header "Abnahmeprotokoll unterschrieben")))
				 (tags-todo "agenda/ACTIVE"   ((org-agenda-overriding-header "Active Projects")))))

	     ("n" "Agenda and all TODOs" ((agenda "") (alltodo "")))

	     ("x" "Next Tasks"
	      ((todo "NEXT" ((org-agenda-overriding-header "Next Tasks")))))

	     ("w" "Workflow Status"
	      ((todo "WAIT"
		     ((org-agenda-overriding-header "Waiting on External")
		      (org-agenda-files org-agenda-files)))
	       (todo "REVIEW"
		     ((org-agenda-overriding-header "In Review")
		      (org-agenda-files org-agenda-files)))
	       (todo "PLAN"
		     ((org-agenda-overriding-header "In Planning")
		      (org-agenda-todo-list-sublevels nil)
		      (org-agenda-files org-agenda-files)))
	       (todo "BACKLOG"
		     ((org-agenda-overriding-header "Project Backlog")
		      (org-agenda-todo-list-sublevels nil)
		      (org-agenda-files org-agenda-files)))
	       (todo "READY"
		     ((org-agenda-overriding-header "Ready for Work")
		      (org-agenda-files org-agenda-files)))
	       (todo "ACTIVE"
		     ((org-agenda-overriding-header "Active Projects")
		      (org-agenda-files org-agenda-files)))
	       (todo "COMPLETED"
		     ((org-agenda-overriding-header "Completed Projects")
		      (org-agenda-files org-agenda-files)))
	       (todo "CANCELlED"
		     ((org-agenda-overriding-header "Cancelled Projects")
		      (org-agenda-files org-agenda-files)))))

	     ("N" "Notes" tags "NOTE"
	      ( (org-agenda-overriding-header "Notes") (org-tags-match-list-sublevels t)))

	     ("h" "Habits" tags-todo "STYLE=\"habit\""
	      ((org-agenda-overriding-header "Habits")
	       (org-agenda-sorting-strategy
		'(todo-state-down effort-up category-keep))))
	     ))

					   ;I use C-c c to start capture mode
     (global-set-key (kbd "C-c c") 'org-capture)
     (setq org-capture-templates
	   (quote (("t" "todo" entry (file "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/refile/todo.org")
		    "* TODO [#A] %?\n%U\n%a\n" :clock-in t :clock-resume t)
		   ("r" "respond" entry (file "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/refile/refile.org")
		    "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
		   ("n" "note" entry (file "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/refile/note.org")
		    "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
		   ("j" "Journal" entry (file+datetree "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/refile/journal.org")
		    "* %?\n%U\n" :clock-in t :clock-resume t :tree-type month)
		   ("w" "org-protocol" entry (file "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/refile/refile.org")
		    "* TODO Review %c\n%U\n" :immediate-finish t)
		   ("m" "Meeting" entry (file "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/refile/meeting.org")
		    "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
		   ("p" "Phone call" entry (file "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/refile/phone.org")
		    "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
		   ("h" "Habit" entry (file "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/refile/habit.org")
		    "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))

					   ;Allow setting single tags without the menu
     (setq org-fast-tag-selection-single-key (quote expert))
					   ;For tag searches ignore tasks with scheduled and deadline dates
     (setq org-agenda-tags-todo-honor-ignore-options t)
					   ;Spell checker
					   ;flyspell mode for spell checking everywhere
     (add-hook 'org-mode-hook 'turn-on-flyspell 'append)

					   ;Setting up spell checking with multiple dictionaries
     (with-eval-after-load "ispell"
       ;;Configure `LANG`, otherwise ispell.el cannot find a 'default
       ;;dictionary' even though multiple dictionaries will be configured
       ;;in next line.
       (setenv "LANG" "en_US.UTF-8")
       (setq ispell-program-name "hunspell")
       ;;Configure German, Swiss German, and two variants of English.
       (setq ispell-dictionary "de_CH,en_GB,en_US")
       ;;ispell-set-spellchecker-params has to be called
       ;;before ispell-hunspell-add-multi-dic will work
       (ispell-set-spellchecker-params)
       (ispell-hunspell-add-multi-dic "de_CH,en_GB,en_US")
       ;;For saving words to the personal dictionary, don't infer it from
       ;;the locale, otherwise it would save to ~/.hunspell_de_DE.
       (setq ispell-personal-dictionary "~/.hunspell_personal"))

					   ;Place tags close to the right-hand side of the window
     (add-hook 'org-finalize-agenda-hook 'place-agenda-tags)
     (defun place-agenda-tags ()
       "Put the agenda tags by the right border of the agenda window."
       (setq org-agenda-tags-column (- 4 (window-width)))
       (org-agenda-align-tags))

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; org-mode agenda options                                                ;;
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;;open agenda in current window
     (setq org-agenda-window-setup (quote current-window))
     ;;warn me of any deadlines in next 7 days
     (setq org-deadline-warning-days 7)
     ;;show me tasks scheduled or due in next fortnight
     (setq org-agenda-span (quote fortnight))
     ;;don't show tasks as scheduled if they are already shown as a deadline
     (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
     ;;don't give awarning colour to tasks with impending deadlines
     ;;if they are scheduled to be done
     (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
     ;;don't show tasks that are scheduled or have deadlines in the
     ;;normal todo list
     (setq org-agenda-todo-ignore-deadlines (quote all))
     (setq org-agenda-todo-ignore-scheduled (quote all))
     ;;sort tasks in order of when they are due and then by priority
     (setq org-agenda-sorting-strategy
	   (quote
	    ((agenda deadline-up priority-down)
	     (todo priority-down category-keep)
	     (tags priority-down category-keep)
	     (search category-keep))))

     ;; Disable keys in org-mode
     ;;    C-c [
     ;;    C-c ]
     ;;    C-c ;
     ;;    C-c C-x C-q  cancelling the clock (we never want this)
     (add-hook 'org-mode-hook
	       '(lambda ()
		  ;; Undefine C-c [ and C-c ] since this breaks my
		  ;; org-agenda files when directories are include It
		  ;; expands the files in the directories individually
		  (org-defkey org-mode-map "\C-c[" 'undefined)
		  (org-defkey org-mode-map "\C-c]" 'undefined)
		  (org-defkey org-mode-map "\C-c;" 'undefined)
		  (org-defkey org-mode-map "\C-c\C-x\C-q" 'undefined))
	       'append)


     ;; Download the sound at https://freesound.org/people/.Andre_Onate/sounds/484665/
     (setq org-clock-sound "~/.emacs.d/wav/mixkit-slot-machine-win-siren-1929.wav")
     )
#+end_src


** Better Font Faces

The =efs/org-font-setup= function configures various text faces to tweak the
sizes of headings and use variable width fonts in most cases so that it looks
more like we're editing a document in =org-mode=.  We switch back to fixed width
(monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

    (defun efs/org-font-setup ()
      ;; Replace list hyphen with dot
      (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set face for org
     (set-face-attribute 'org-document-title nil :font "Iosevka Etoile" :weight 'bold :height 2.0)
     ;; Set faces for heading levels
      (dolist (face '((org-level-1 . 1.4)
                      (org-level-2 . 1.3)
                      (org-level-3 . 1.2)
                      (org-level-4 . 1.1)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1)))
        (set-face-attribute (car face) nil :font "Iosevka Etoile" :weight 'medium :height (cdr face)))


  
      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
      (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
      (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
      (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

  ;; Get rid of the background on column views
  ;; (set-face-attribute 'org-column-title nil :background "light gray")
  ;; (set-face-attribute 'org-column face nil :height 180 :width normal)
  ;; (set-face-attribute 'org-column nil :background "light gray" :foreground "dark red")


#+end_src


** Org Habit

#+begin_src emacs-lisp
     (require 'org-habit)
     (add-to-list 'org-modules 'org-habit)
     (setq org-habit-graph-column 60)
     ;; This turns the habit display on again at 6AM each morning. 
     (run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))
#+end_src




** Org Screenshot
:PROPERTIES:
:ATTACH_DIR: /home/christian/.emacs.d/Emacs-att
:END:

#+begin_src emacs-lisp
(use-package org-attach-screenshot
  :bind ("<f6> s" . org-attach-screenshot)
  :config (setq org-attach-screenshot-dirfunction
		(lambda () 
		  (progn (cl-assert (buffer-file-name))
			 (concat (file-name-sans-extension (buffer-file-name))
				 "-att")))
		org-attach-screenshot-command-line "gnome-screenshot -a -f %f"))
#+end_src


* Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** COMMENT Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing
writing experience as it centers the contents of the buffer horizontally to seem
more like you are editing a document.  This is really a matter of personal
preference so you can remove the block below if you don't like the behavior.

#+begin_src

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Babel 
*** Statup Settings
#+begin_src emacs-lisp
  (require 'ox-latex)
  (require 'ob-js)
  (require 'color)

  ;; (unless (package-installed-p 'ob-ipython)
  ;;   (package-install 'ob-ipython))
  ;; (require 'ob-ipython)

  (setq org-startup-shrink-all-tables t)
  (setq org-startup-folded t)
  (setq org-hide-block-startup t)

  ;; Make babel results blocks lowercase
  (setq org-babel-results-keyword "results")

  ;; Do not ask when evaluating source code blocks
  (defun bh/display-inline-images ()
    (condition-case nil
        (org-display-inline-images)
      (error nil)))
#+end_src
*** Minted
#+begin_src emacs-lisp
   ;; Highlight coloring export of source code block export
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
  (setq org-src-fontify-natively t)
#+end_src
*** Utils 
#+begin_src emacs-lisp
  (setq org-ditaa-jar-path "~/java/ditaa.jar")
  (setq org-plantuml-jar-path "~/java/plantuml.jar")
  ;; Use fundamental mode when editing plantuml blocks with C-c '
  (add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))
  (add-to-list 'exec-path "/usr/bin/magick")
  (use-package gnuplot
    :init
  )
#+end_src
*** Languages
To execute or export code in =org-mode= code blocks, you'll need to set up
=org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]]
documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp
    (with-eval-after-load 'org
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)    ; 
         (C          . t)    ; C, C++, D
         (js         . t)    ; JavaScript
         (org        , t)    ;
         (ditaa      . t)    ; ditaa
         (shell      . t)    ; shell, bash
         (lisp       . t)    ; lisp
         (latex      . t)    ; latex
         (octave     . t)    ; octave
         (gnuplot    . t)    ; gnuplot
         (python     . t)    ; pyhon
         (plantuml   . t)))  ; this line activate plantuml

      (push '("conf-unix" . conf-unix) org-src-lang-modes))

    ;; Use python lexer for ipython blocks
;;  (ipython     . t)   ; pyhon
;;  (setq python-shell-interpreter "python3")
;;  (add-to-list 'org-latex-minted-langs '(ipython "python"))  

  ;; Do not prompt to confirm evaluation
  ;; This may be dangerous - make sure you understand the consequences
  ;; of setting this -- see the docstring for details
  (setq org-confirm-babel-evaluate nil)
#+end_src

** Presentation

*** Reveal

#+begin_src emacs-lisp
  (unless (package-installed-p 'ox-reveal)
    (package-install 'ox-reveal))
  (require 'ox-reveal)
  (setq ox-reveal-always-ensure t)
  (setq org-reveal-root "file:///home/christian/Daten/reveal.js")
  (setq Org-Reveal-title-slide nil)
#+end_src

*** Org-Tree Slides
 hide-mode-line hide the modeline to allow to have a clean screen while using
 org-tree-slide-mode

#+begin_src emacs-lisp
(use-package hide-mode-line
  :ensure t)
#+end_src

Some tweaks to have a better looking while presenting slides 

#+begin_src emacs-lisp
      (defun my/org-tree-slide-setup ()
        (interactive)
        (org-display-inline-images)
        (hide-mode-line-mode 1)
        (setq text-scale-mode-amount 3)
        (text-scale-mode 1))

      (defun my/org-tree-slide-end ()
        (interactive)
        (org-display-inline-images)
        (hide-mode-line-mode 0)
        (text-scale-mode 0)
        (org-tree-slide-mode 0))

      (use-package org-tree-slide
        :ensure t
        :defer t
        :custom
        (org-image-actual-width nil)
        (org-tree-slide-activate-message "Presentation started!")
        (org-tree-slide-deactivate-message "Presentation finished!")
        :hook ((org-tree-slide-play . my/org-tree-slide-setup)
               (org-tree-slide-stop . my/org-tree-slide-end))
        :bind (:map org-tree-slide-mode-map
                    ("<f6>" . org-tree-slide-move-previous-tree)
                    ("<f7>" . org-tree-slide-move-next-tree)
                    ("<f8>" . org-tree-slide-content)))

#+end_src

*** Org-Present
#+begin_src emacs-lisp
(defun dw/org-present-prepare-slide ()
  (org-overview)
  (org-show-entry)
  (org-show-children))

(defun dw/org-present-hook ()
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                     (header-line (:height 4.5) variable-pitch)
                                     (org-code (:height 1.55) org-code)
                                     (org-verbatim (:height 1.55) org-verbatim)
                                     (org-block (:height 1.25) org-block)
                                     (org-block-begin-line (:height 0.7) org-block)))
  (setq header-line-format " ")
  (org-display-inline-images)
  (dw/org-present-prepare-slide))

(defun dw/org-present-quit-hook ()
  (setq-local face-remapping-alist '((default variable-pitch default)))
  (setq header-line-format nil)
  (org-present-small)
  (org-remove-inline-images))

(defun dw/org-present-prev ()
  (interactive)
  (org-present-prev)
  (dw/org-present-prepare-slide))

(defun dw/org-present-next ()
  (interactive)
  (org-present-next)
  (dw/org-present-prepare-slide))

(use-package org-present
  :bind (:map org-present-mode-keymap
         ("C-c C-j" . dw/org-present-next)
         ("C-c C-k" . dw/org-present-prev))
  :hook ((org-present-mode . dw/org-present-hook)
         (org-present-mode-quit . dw/org-present-quit-hook)))
#+end_src
** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks
into your Org files in combination with =org-tempo= by typing =<= followed by
the template name like =el= or =py= and then press =TAB=.  For example, to
insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to
expand into such a block.

You can add more =src= block templates below by copying one of the lines and
changing the two strings at the end, the first to be the template name and the
second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that
=efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.
This function checks to see if the file being saved is the Emacs.org file you're
looking at right now, and if so, automatically exports the configuration here to
the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Clocking Setup

#+begin_src emacs-lisp
  ; Clocking Functions

  (setq bh/keep-clock-running nil)

  (defun bh/clock-in-to-next (kw)
    "Switch a task from TODO to NEXT when clocking in. Skips capture tasks, projects, and subprojects. Switch projects and subprojects from NEXT back to TODO"
    (when (not (and (boundp 'org-capture-mode) org-capture-mode))
      (cond
       ((and (member (org-get-todo-state) (list "TODO"))
             (bh/is-task-p))
        "NEXT")
       ((and (member (org-get-todo-state) (list "NEXT"))
             (bh/is-project-p))
        "TODO"))))

  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))

  (defun bh/punch-in (arg)
    "Start continuous clocking and set the default task to the selected task. If no task is selected set the Organization task as the default task."
    (interactive "p")
    (setq bh/keep-clock-running t)
    (if (equal major-mode 'org-agenda-mode)
        ;;
        ;; We're in the agenda
        ;;
        (let* ((marker (org-get-at-bol 'org-hd-marker))
               (tags (org-with-point-at marker (org-get-tags-at))))
          (if (and (eq arg 4) tags)
              (org-agenda-clock-in '(16))
            (bh/clock-in-organization-task-as-default)))
      ;;
      ;; We are not in the agenda
      ;;
      (save-restriction
        (widen)
                                          ; Find the tags on the current task
        (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
            (org-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))))

  (defun bh/punch-out ()
    (interactive)
    (setq bh/keep-clock-running nil)
    (when (org-clock-is-active)
      (org-clock-out))
    (org-agenda-remove-restriction-lock))

  (defun bh/clock-in-default-task ()
    (save-excursion
      (org-with-point-at org-clock-default-task
        (org-clock-in))))

  (defun bh/clock-in-parent-task ()
    "Move point to the parent (project) task if any and clock in"
    (let ((parent-task))
      (save-excursion
        (save-restriction
          (widen)
          (while (and (not parent-task) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (if parent-task
              (org-with-point-at parent-task
                (org-clock-in))
            (when bh/keep-clock-running
              (bh/clock-in-default-task)))))))

  (defvar bh/organization-task-id "2cbef41d-71da-4e1f-b161-e827513fa0ae")

  (defun bh/clock-in-organization-task-as-default ()
    (interactive)
    (org-with-point-at (org-id-find bh/organization-task-id 'marker)
      (org-clock-in '(16))))

  (defun bh/clock-out-maybe ()
    (when (and bh/keep-clock-running
               (not org-clock-clocking-in)
               (marker-buffer org-clock-default-task)
               (not org-clock-resolving-clocks-due-to-idleness))
      (bh/clock-in-parent-task)))


  (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

#+end_src

** Archiving Setup

** Latex - preview and pdf-export

#+begin_src emacs-lisp
      (require 'ox-latex)
      ;; Latex search path
      (setq exec-path (append exec-path '("/usr/share/texmf")))

      (with-eval-after-load 'tex
        (add-to-list 'safe-local-variable-values
                     '(TeX-command-extra-options . "-shell-escape")))

      ;;Allow reference to figures e.g. [@fig:label]
      (setq org-latex-prefer-user-labels t)

      ;; KDE Setting  
      ;; Make org aware of the tex enginge
      ;; -8bit option avoids undifined white space characters in minted code blocks
      (setq org-latex-pdf-process
            '("xelatex -8bit -shell-escape -interaction nonstopmode -output-directory %o %f"
              "xelatex -8bit -shell-escape -interaction nonstopmode -output-directory %o %f"))


      ;; (setq org-latex-pdf-process
      ;;       '("lualatex -shell-escape -interaction nonstopmode %f"
      ;;         "lualatex -shell-escape -interaction nonstopmode %f"))

      ;; (setq org-latex-pdf-process
      ;;    '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
      ;;      "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
      ;;      "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))


      '(org-preview-latex-process-alist
        (quote
         (
          (dvipng      :programs ("lualatex" "dvipng")
                       :description "dvi > png"
                       :message "you need to install the programs: latex and dvipng."
                       :image-input-type "dvi"
                       :image-output-type "png"
                       :image-size-adjust (1.0 . 1.0)
                       :latex-compiler ("lualatex -output-format dvi -interaction nonstopmode -output-directory %o %f")
                       :image-converter ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))

          (dvisvgm     :programs ("latex" "dvisvgm")
                       :description "dvi > svg"
                       :message "you need to install the programs: latex and dvisvgm."
                       :use-xcolor t
                       :image-input-type "xdv"
                       :image-output-type "svg"
                       :image-size-adjust (1.7 . 1.5)
                       :latex-compiler ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
                       :image-converter ("dvisvgm %f -n -b min -c %S -o %O"))

          (imagemagick :programs ("latex" "convert")
                       :description "pdf > png"
                       :message "you need to install the programs: latex and imagemagick."
                       :use-xcolor t
                       :image-input-type "pdf"
                       :image-output-type "png"
                       :image-size-adjust (1.0 . 1.0)
                       :latex-compiler ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
                       :image-converter ("convert -density %D -trim -antialias %f -quality 100 %O")))))

  (eval-after-load "ox-latex"
    '(add-to-list 'org-latex-classes
                  `("beamer"
                    ,(concat "\\documentclass[presentation]{beamer}\n"
                             "[DEFAULT-PACKAGES]"
                             "[PACKAGES]"
                             "[EXTRA]\n")
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))


    (with-eval-after-load "ox-latex"
      (add-to-list 'org-latex-classes
                '("beamer" "\\documentclass[presentation]{beamer}
      "
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))

      (with-eval-after-load "ox-latex"
        (add-to-list 'org-latex-classes
                     '("koma-article" "\\documentclass{scrartcl}
             "
                       ("\\section{%s}"       . "\\section{%s}")
                       ("\\subsection{%s}"    . "\\subsection{%s}")
                       ("\\subsubsection{%s}" . "\\subsubsection{%s}")
                       ("\\paragraph{%s}"     . "\\paragraph{%s}")
                       ("\\subparagraph{%s}"  . "\\subparagraph{%s}"))))



      (with-eval-after-load "ox-latex"
        (add-to-list 'org-latex-classes
                     '("koma-report" "\\documentclass{scrreprt}
             "
                       ("\\chapter{%s}"       . "\\chapter{%s}")
                       ("\\section{%s}"       . "\\section{%s}")
                       ("\\subsection{%s}"    . "\\subsection{%s}")
                       ("\\subsubsection{%s}" . "\\subsubsection{%s}")
                       ("\\paragraph{%s}"     . "\\paragraph{%s}")
                       ("\\subparagraph{%s}"  . "\\subparagraph{%s}"))))


      (with-eval-after-load "ox-latex"
        (add-to-list 'org-latex-classes
                     '("dg_public" "\\documentclass{duagon_public}
             "
                       ("\\section{%s}" . "\\section{%s}")
                       ("\\subsection{%s}" . "\\subsection{%s}")
                       ("\\subsubsection{%s}" . "\\subsubsection{%s}")
                       ("\\paragraph{%s}" . "\\paragraph{%s}")
                       ("\\subparagraph{%s}" . "\\subparagraph{%s}"))))

#+end_src


* COMMENT Backward-Forward

#+begin_src
  (use-package backward-forward
  :demand
  :config
  (backward-forward-mode t)
  :bind (:map backward-forward-mode-map
              ("<C-left>" . nil)
              ("<C-right>" . nil)
              ("<M-left>" . backward-forward-previous-location)
              ("<M-right>" . backward-forward-next-location)
              ("<mouse-8>" . backward-forward-previous-location)
              ("<mouse-9>" . backward-forward-next-location)
              )
  )
#+end_src


* Development

** LSP Mode: Languages

*** IDE Features with lsp-mode
**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many
different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language
Server Protocol]].  Before trying to set up =lsp-mode= for a particular language,
check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which
language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where
=lsp-mode='s default keybindings will be added.  I *highly recommend* using the
prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you
should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer
and trying different things that you find there.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :diminish "L"
    :commands (lsp lsp-deferred)
    :init (setq lsp-keymap-prefix "C-p p"
                lsp-enable-file-watchers nil
                lsp-enable-on-type-formatting nil
                lsp-enable-snippet nil
                lsp-lens-enable nil)
    :config
    (lsp-enable-which-key-integration t)
    (setq read-process-output-max (* 1024 1024))
)
#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs
feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage
(linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like
symbols in a file, references of a symbol, or diagnostic messages (errors and
warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol
  under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in
  the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to
you if you like to have a file browser at the left side of your screen in your
editor.

#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp
    :commands lsp-treemacs-references)
#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by
name in your code.  When you run these commands, a prompt will appear in the
minibuffer allowing you to type part of the name of a symbol in your code.
Results will be populated in the minibuffer so that you can find what you're
looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src


*** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to
Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration
docs]] to learn how to configure the debugger for your language.  Also make sure
to check out the documentation for the debug adapter to see what configuration
parameters are available to use for your debug templates!

#+begin_src

  (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
    :commands dap-debug
    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;; Bind `C-c l d` to `dap-hydra` for easy access
    (general-define-key
      :keymaps 'lsp-mode-map
      :prefix lsp-keymap-prefix
      "d" '(dap-hydra t :wk "debugger")))

#+end_src


*** TypeScript

This is a basic configuration for the TypeScript language so that =.ts= files
activate =typescript-mode= when opened.  We're also adding a hook to
=typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to
get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*Important note!* For =lsp-mode= to work with TypeScript (and JavaScript) you
will need to install a language server on your machine.  If you have Node.js
installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no

  npm install -g typescript-language-server typescript

#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler
package.


*** Python

- see also https://www.mattduck.com/lsp-python-getting-started.html

We use =lsp-mode= and =dap-mode= to provide a more complete development
environment for Python in Emacs.  Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the
=lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying
=lsp-mode=!

#+begin_src sh :tangle no
pip install --user "python-language-server[all]"
#+end_src

There are a number of other language servers for Python so if you find that
=pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration
documentation]] to try the others!

#+begin_src emacs-lisp 

    (use-package python-mode
      :ensure nil
      :hook (python-mode . lsp-deferred)
      :custom
      ;; NOTE: Set these if Python 3 is called "python3" on your system!
      (python-shell-interpreter "python")
      (dap-python-executable "python")
      (dap-python-debugger 'debugpy)
      :config
       (require 'dap-python)
  )
#+end_src


You can use the pyvenv package to use =virtualenv= environments in Emacs.  The
=pyvenv-activate= command should configure Emacs to cause =lsp-mode= and
=dap-mode= to use the virtual environment when they are loaded, just select the
path to your virtual environment before loading your project.

#+begin_src 
  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))
#+end_src


*** C++ + Language Server

#+begin_src emacs-lisp
  (setq c-default-style "linux")
  (setq c-basic-offset 4)
#+end_src


*** CCLS 
#+begin_src emacs-lisp
  (use-package ccls
      :init (setq ccls-sem-highlight-method 'font-lock)
      :hook ((c-mode c++-mode objc-mode cuda-mode) . (lambda () (require 'ccls) (lsp-deferred)))
  )
#+end_src


*** NodeJs

#+begin_src emacs-lisp
;; JavaScript
;; JavaScript: MinorMode
(unless (package-installed-p 'js2-mode)
  (package-install 'js2-mode))
(require 'js2-mode)
;; (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;; ;; Better imenu
;; (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)

;; JavaScript: Refactor Package
(unless (package-installed-p 'js2-refactor)
  (package-install 'js2-refactor))
(require 'js2-refactor)
(unless (package-installed-p 'xref-js2)
  (package-install 'xref-js2))

;; JavaScript: Jumping to function definitions
(require 'xref-js2)
(add-hook 'js2-mode-hook #'js2-refactor-mode)
(js2r-add-keybindings-with-prefix "C-c C-r")
(define-key js2-mode-map (kbd "C-k") #'js2r-kill)
;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
;; unbind it.
(define-key js-mode-map (kbd "M-.") nil)

(add-hook 'js2-mode-hook (lambda ()
                           (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))

;; JavaScript: Debugging aid
(unless (package-installed-p 'sourcemap)
  (package-install 'sourcemap))
(require 'sourcemap)
(setq coffee-args-compile '("-c" "-m")) ;; generating sourcemap file
(add-hook 'coffee-after-compile-hook 'sourcemap-goto-corresponding-point)


;; JavaScript: Debugging Mode and REPL
(unless (package-installed-p 'indium)
   (package-install 'indium))
(require 'indium)
(add-hook 'js-mode-hook #'indium-interaction-mode)
#+end_src


** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than
=completion-at-point= which is more reminiscent of what you would expect from an
IDE.  We add a simple configuration to make the keybindings a little more useful
(=TAB= now completes the selection and initiates completion at the current
location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with
icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  ;; (use-package company-box
  ;;   :hook (company-mode . company-box-mode))

#+end_src


** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier
to navigate around code projects for various languages.  Many packages integrate
with Projectile so it's a good idea to have it installed even if you don't use
its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy
to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=)
doesn't always comment things in the way you might expect so we use
[[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/=
since other editors sometimes use this binding but you could also replace Emacs'
=M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Rainbow Delimiters
:PROPERTIES:
:ID:       ec043d1f-d554-423f-a899-3d5ac19c4585
:END:

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested
parentheses and brackets according to their nesting depth.  This makes it a lot
easier to visually match parentheses in Emacs Lisp code without having to count
them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src


* Terminals
** term-mode

=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in
Emacs Lisp, you can start using it immediately with very little configuration.
If you are on Linux or macOS, =term-mode= is a great choice to get started
because it supports fairly complex terminal applications (=htop=, =vim=, etc)
and works pretty reliably.  However, because it is written in Emacs Lisp, it can
be slower than other options like =vterm=.  The speed will only be an issue if
you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.
=line-mode= enables you to use normal Emacs keybindings while moving around in
the terminal buffer while =char-mode= sends most of your keypresses to the
underlying terminal.  While using =term-mode=, you will want to be in
=char-mode= for any terminal applications that have their own keybindings.  If
you're just in your usual shell, =line-mode= is sufficient and feels more
integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode=
when you enter Evil's insert mode (press =i=).  You will automatically be
switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode

#+begin_src emacs-lisp

  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

*** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable
handling of a wider range of color codes so that many popular terminal
applications look as you would expect them to.  Keep in mind that this package
requires =ncurses= to be installed on your machine so that it has access to the
=tic= program.  Most Linux distributions come with this program installed
already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native
module to interact with the underlying terminal applications.  This enables it
to be much faster than =term-mode= and to also provide a more complete terminal
emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to
use =vterm= because there is a module that will need to be compiled before you
can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

** shell-mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell.  It is *not* a
terminal emulator so more complex terminal programs will not run inside of it.
It does have much better integration with Emacs because all command input in
this mode is handled by Emacs and then sent to the underlying shell once you
press Enter.  This means that you can use =evil-mode='s editing motions on the
command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-shell-history= - A searchable history of commands typed into the shell

One advantage of =shell-mode= on Windows is that it's the only way to run
=cmd.exe=, PowerShell, Git Bash, etc from within Emacs.  Here's an example of
how you would set up =shell-mode= to run PowerShell on Windows:

#+begin_src emacs-lisp

  (when (eq system-type 'windows-nt)
    (setq explicit-shell-file-name "powershell.exe")
    (setq explicit-powershell.exe-args '()))

#+end_src

** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides
you with a cross-platform implementation (even on Windows!) of the common GNU
utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It
also allows you to call Emacs Lisp functions directly from the shell and you can
even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an
Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other
packages due to the particularity of where you need to set some options for them
to go into effect, the lack of shell completions (by default) for some useful
things like Git commands, and that REPL programs sometimes don't work as well.
However, many of these limitations can be dealt with by good configuration and
installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp

  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))


#+end_src


* File Management
** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!
Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

      (use-package dired
        :ensure nil
        :commands (dired dired-jump)
        :bind (("C-x C-j" . dired-jump))
        :custom ((dired-listing-switches "-agho --group-directories-first"))
      ;;   :config
      ;;   (evil-collection-define-key 'normal 'dired-mode-map
      ;;     "h" 'dired-single-up-directory
      ;;     "l" 'dired-single-buffer)
        )

      (use-package dired-single
        :commands (dired dired-jump))

      (use-package all-the-icons-dired
        :hook (dired-mode . all-the-icons-dired-mode))

      (use-package dired-open
        :commands (dired dired-jump)
        :config
        ;; Doesn't work as expected!
        ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
        (setq dired-open-extensions '(("png" . "feh")
                                      ("mkv" . "mpv"))))

      (use-package dired-hide-dotfiles
        :hook (dired-mode . dired-hide-dotfiles-mode)
        ;; :config
        ;; (evil-collection-define-key 'normal 'dired-mode-map
        ;;   "H" 'dired-hide-dotfiles-mode)
        )

#+end_src


* Applications
** Json-Mode

#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t
  )
#+end_src


** Rest API

#+begin_src emacs-lisp
  (use-package request)
  (use-package json)
#+end_src

** RestClient

[[https://github.com/pashky/restclient.el][restclient.el]] and [[https://erick.navarro.io/blog/testing-an-api-with-emacs-and-restclient/][Testing an API with emacs and restclient]]

Here we're using use-package to install restclient.el and also we're configuring
 restclient to use extension .http to enable its features. Now if we open a file
 with .http extension restclient will be enabled automatically.
 
#+begin_src emacs-lisp
  (use-package restclient
    :ensure t
    :mode (("\\.http\\'" . restclient-mode))
     :bind (:map restclient-mode-map
                 ("C-c C-f" . json-mode-beautify)))
#+end_src

** Some App

This is an example of configuring another non-Emacs application using org-mode.
Not only do we write out the configuration at =.config/some-app/config=, we also
compute the value that gets stored in this configuration from the Emacs Lisp
block above it.

#+NAME: the-value
#+begin_src emacs-lisp :tangle no

  (+ 55 100)

#+end_src

*NOTE*: Set the =:tangle= parameter below to =.config/some-app/config= for this
to work!

#+begin_src conf :tangle no :noweb yes

  value=<<the-value()>>

#+end_src


* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more
frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src


* Info Pages

see also [[https://www.emacswiki.org/emacs/ExternalDocumentation][EmacsWiki]]


#+begin_src emacs-lisp 
;; To make this directory available to Emacs 
(add-to-list 'Info-additional-directory-list "~/.local/share/info")
#+end_src


* RSS Feeds

#+begin_src emacs-lisp 
  ;; Configure Elfeed
  (use-package elfeed
    :ensure t
    :config
    (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory)
          elfeed-show-entry-switch 'display-buffer)
    :bind
    ("C-x w" . elfeed ))
#+end_src


#+begin_src emacs-lisp
  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "/mnt/c/Users/cbollinger/cloud.duagon.com/Documents/org-mode/refile/elfeed.org"))
  )
#+end_src


* Treemacs Workspace
** ionia
*** libhost
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/libraries/ionia-libhost
*** uic-gw
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/uic-gw
*** mvb_echo_server
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/mvb_echo_server
*** mvb_tt
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/mvb_tt
*** functional_test_cpu
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/functional_test_cpu
*** i303_prod_ft
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/i303_prod_ft
*** wtb_line_test
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/wtb_line_test
*** tt-handlers
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/tt-handlers
*** mvb-udp-gw
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/mvb-udp-gw
*** mvb_astt_agent
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/mvb_astt_agent
*** wtb_ll_test
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/wtb_ll_test
*** mvb_emv_test
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/mvb_emv_test
*** can_emc_test
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/can_emc_test
*** led-cpu-set
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/led-cpu-set
*** trdp_pd_demo
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/trdp_pd_demo
*** i306_ft
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/i306_ft
*** i214-ft
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/i214-ft
*** i10x_dongle
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/i10x_dongle
*** mop-handler
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/mop-handler
*** i102-ft-echo-server
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/i102-ft-echo-server
*** remoteiod
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/remoteiod
*** eclr-app
 - path :: ~/Daten/dg_git/linux/project-specific/ionia/applications/eclr-app
** sp4comm
*** sp4comm
 - path :: ~/Daten/Sience/Digital-Signal-Processing/sp4comm/orgmode/sp4comm.pdf
*** Module 1: Basics of Digital Signal Processing
 - path :: ~/Daten/Sience/Digital-Signal-Processing/sp4comm/orgmode/week1
*** Module 2: Vector Spaces
 - path :: ~/Daten/Sience/Digital-Signal-Processing/sp4comm/orgmode/week2
*** Module 3 Part 1: Introduction to Fourier Analysis
 - path :: ~/Daten/Sience/Digital-Signal-Processing/sp4comm/orgmode/week3
*** Module 3 Part 2: Advanced Fourier Analysis
 - path :: ~/Daten/Sience/Digital-Signal-Processing/sp4comm/orgmode/week4
*** Module 4 Part1: Introduction to Filtering
 - path :: ~/Daten/Sience/Digital-Signal-Processing/sp4comm/orgmode/week5
*** Module 4 Part 2: Filter Design
 - path :: ~/Daten/Sience/Digital-Signal-Processing/sp4comm/orgmode/week6
*** Module 5: Sampling and Quantization
 - path :: ~/Daten/Sience/Digital-Signal-Processing/sp4comm/orgmode/week7
*** Module 6: Digital Communication Systems
 - path :: ~/Daten/Sience/Digital-Signal-Processing/sp4comm/orgmode/week8
** Home
*** christian
  - path :: ~
